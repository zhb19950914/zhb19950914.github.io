import{g as n,f as s,E as a}from"./common-d6bd45c0.js";const t='{"title":"Flux与Redux","frontmatter":{"date":"2021-06-11","title":"Flux与Redux","tags":["react","redux"],"describe":"Flux与Redux"},"headers":[{"level":2,"title":"Flux","slug":"flux"},{"level":3,"title":"单向数据流","slug":"单向数据流"},{"level":2,"title":"Redux","slug":"redux"},{"level":3,"title":"与Flux的不同之处","slug":"与flux的不同之处"},{"level":3,"title":"Action","slug":"action"},{"level":3,"title":"Action Creator","slug":"action-creator"},{"level":3,"title":"connect","slug":"connect"},{"level":3,"title":"Reducers","slug":"reducers"},{"level":3,"title":"combineReducers","slug":"combinereducers"},{"level":3,"title":"Store","slug":"store"},{"level":2,"title":"Redux Middleware","slug":"redux-middleware"},{"level":3,"title":"Step 1. 手动添加打印日志的中间件","slug":"step-1-手动添加打印日志的中间件"},{"level":3,"title":"Step 2. 再添加一个错误打印的中间件","slug":"step-2-再添加一个错误打印的中间件"},{"level":3,"title":"Step 3. 将2个中间件串联在一起","slug":"step-3-将2个中间件串联在一起"},{"level":3,"title":"Step 4. back to Redux","slug":"step-4-back-to-redux"},{"level":2,"title":"异步Action","slug":"异步action"}],"relativePath":"docs/redux.md","lastUpdated":1624611643117.5535}';var p={};const o=a('<h2 id="flux"><a class="header-anchor" href="#flux" aria-hidden="true">#</a> Flux</h2><p>Flux是Facebook用于构建客户端Web应用程序的基本架构，我们可以将Flux看做一种应用程序中的数据流的设计模式，而Redux正是基于Flux的核心思想实现的一套解决方案</p><p>首先，在Flux中会有以下几个角色的出现：</p><ul><li>Dispacher：调度器，接收到Action，并将它们发送给Store。</li><li>Action：动作消息，包含动作类型与动作描述。</li><li>Store：数据中心，持有应用程序的数据，并会响应Action消息。</li><li>View：应用视图，可展示Store数据，并实时响应Store的更新。</li></ul><p>从通讯的角度还可将其视为Action请求层 -&gt; Dispatcher传输层 -&gt; Store处理层 -&gt; View视图层。</p><h3 id="单向数据流"><a class="header-anchor" href="#单向数据流" aria-hidden="true">#</a> 单向数据流</h3><p>Flux应用中的数据以单一方向流动：</p><ul><li>视图产生动作消息，将动作传递给调度器。</li><li>调度器将动作消息发送给每一个数据中心。</li><li>数据中心再将数据传递给视图。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/3/24/169ad99e277502d0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="RUNOOB 图标"></p><p>单一方向数据流还具有以下特点：</p><ul><li>集中化管理数据。常规应用可能会在视图层的任何地方或回调进行数据状态的修改与存储，而在Flux架构中，所有数据都只放在Store中进行储存与管理。</li><li>可预测性。在双向绑定或响应式编程中，当一个对象改变时，可能会导致另一个对象发生改变，这样会触发多次级联更新。对于Flux架构来讲，一次Action触发，只能引起一次数据流循环，这使得数据更加可预测。</li><li>方便追踪变化。所有引起数据变化的原因都可由Action进行描述，而Action只是一个纯对象，因此十分易于序列化或查看。</li></ul><h2 id="redux"><a class="header-anchor" href="#redux" aria-hidden="true">#</a> Redux</h2><p>Redux是JavaScript应用可预测的状态管理容器，它具有以下特性：</p><ul><li>可预测性，使用Redux能帮助你编写在不同的环境中编写行为一致、便于测试的程序。</li><li>集中性，集中化应用程序的状态管理可以很方便的实现撤销、恢复、状态持久化等。</li><li>可调式，Redux Devtools提供了强大的状态追踪功能，能很方便的做一个时间旅行者。</li><li>灵活，Redux适用于任何UI层，并有一个庞大的生态系统。</li></ul><p>它还有三大原则：</p><ul><li>单一数据源。整个应用的State储存在单个Store的对象树中。</li><li>State状态是只读的。您不应该直接修改State，而是通过触发Action来修改它。Action是一个普通对象，因此它可以被打印、序列化与储存。</li><li>使用纯函数进行修改状态。为了指定State如何通过Action操作进行转换，需要编写reducers纯函数来进行处理。reducers通过当前的状态树与动作进行计算，每次都会返回一个新的状态对象。</li></ul><h3 id="与flux的不同之处"><a class="header-anchor" href="#与flux的不同之处" aria-hidden="true">#</a> 与Flux的不同之处</h3><p>Redux受到了Flux架构的启发，但在实现上有一些不同</p><ul><li>Redux并没有 dispatcher。它依赖纯函数来替代事件处理器，也不需要额外的实体来管理它们。Flux尝尝被表述为：(state, action) =&gt; state，而纯函数也是实现了这一思想。</li><li>Redux为不可变数据集。在每次Action请求触发以后，Redux都会生成一个新的对象来更新State，而不是在当前状态上进行更改。</li><li>Redux有且只有一个Store对象。它的Store储存了整个应用程序的State。</li></ul><h3 id="action"><a class="header-anchor" href="#action" aria-hidden="true">#</a> Action</h3><p>在Redux中，Action 是一个纯粹的 JavaScript 对象，用于描述Store 的数据变更信息，它们也是 Store 的信息来源，简单来说，所有数据变化都来源于 Actions 。</p><p>在 Action 对象中，必须有一个字段type用于描述操作类型，他们的值为字符串类型，通常我会将所有 Action 的 type 类型存放于同一个文件中，便于维护（小项目可以不必这样做）：</p><div class="language-javascript"><pre><code><span class="token comment">// store/mutation-types.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">ADD_TODO</span> <span class="token operator">=</span> <span class="token string">&#39;ADD_TODO&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">REMOVE_TODO</span> <span class="token operator">=</span> <span class="token string">&#39;REMOVE_TODO&#39;</span>\n\n<span class="token comment">// store/actions.js</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> types <span class="token keyword">from</span> <span class="token string">&#39;./mutation-types.js&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> types<span class="token punctuation">.</span><span class="token constant">ADD_TODO</span><span class="token punctuation">,</span>\n    <span class="token comment">// .. pass item</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Action对象除了type以外，理论上其他的数据结构都可由自己自定义，在这里推荐flux-standard-action这个Flux Action标准，简单来说它规范了基本的Action对象结构信息</p><div class="language-javascript"><pre><code><span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&#39;ADD_TODO&#39;</span><span class="token punctuation">,</span>\n  payload<span class="token operator">:</span> <span class="token punctuation">{</span>\n    text<span class="token operator">:</span> <span class="token string">&#39;Do something.&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h3 id="action-creator"><a class="header-anchor" href="#action-creator" aria-hidden="true">#</a> Action Creator</h3><p>我们将Action Creator与Action进行区分，避免混为一谈。在Redux中，Action Creator是用于创建动作的函数，它会返回一个Action对象:</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;ADD_TODO&#39;</span><span class="token punctuation">,</span>\n    payload<span class="token operator">:</span> <span class="token punctuation">{</span>\n      text<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>与Flux所不同的是，在Flux 中Action Creator 同时会负责触发 dispatch 操作，而Redux只负责创建Action，实际的派发操作由store.dispatch方法执行：store.dispatch(addTodo(&#39;something&#39;))，这使得Action Creator的行为更简单也便于测试</p><h3 id="connect"><a class="header-anchor" href="#connect" aria-hidden="true">#</a> connect</h3><p>通常我们不会直接使用store.dispatch方法派发 Action，而是使用connect方法获取dispatch派发器</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> querAsyncName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./actionhome&#39;</span>\n@<span class="token function">connect</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> homeReducer<span class="token operator">:</span> state <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token function-variable function">onQuerAsyncName</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">querAsyncName</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre></div><h3 id="reducers"><a class="header-anchor" href="#reducers" aria-hidden="true">#</a> Reducers</h3><p>对于Action来讲，它们只是描述了发生了什么事情，而应用程序状态的变化，全由Reducers进行操作更改。</p><p>在实现Reducer函数之前，首先需要定义应用程序中State的数据结构，它被储存为一个单独的对象中，因此在设计它的时候，尽量从全局思维去考虑，并将其从逻辑上划分为不同的模块，采用最小化、避免嵌套，并将数据与UI状态分别存储。</p><p>Reducer是一个纯函数，它会结合先前的state状态与Action对象来生成的新的应用程序状态树：</p><div class="language-javascript"><pre><code><span class="token punctuation">(</span><span class="token parameter">previousState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> newState\n</code></pre></div><p>内部一般通过switch...case语句来处理不同的Action</p><p>保持Reducer的纯函数特性非常重要，Reducer需要做到以下几点：</p><ul><li>不应该直接改变原有的State，而是在原有的State基础上生成一个新的State。</li><li>调用时不应该产生任何副作用，如API调用、路由跳转等。</li><li>当传递相同的参数时，每次调用的返回结果应该是一致的，所以也要避免使用Date.now()或Math.random()这样的非纯函数。</li></ul><h3 id="combinereducers"><a class="header-anchor" href="#combinereducers" aria-hidden="true">#</a> combineReducers</h3><p>Redux应用程序最常见的State形状是一个普通的Javascript对象，其中包含每个顶级键的特定于域的数据的“切片”，每个“切片”都具有一个相同结构的reducer函数处理该域的数据更新，多个reducer也可同时响应同一个action，在需要的情况独立更新他们的state。</p><p>正是因为这种模式很常见，Redux就提供了一个工具方法去实现这样的行为：combineReducers。它只是用于简化编写Redux reducers最常见的示例，并规避一些常见的问题。它还有一个特性，当一个Action产生时，它会执行每一个切片的reducer，为切片提供更新状态的机会。而传统的单一Reducer无法做到这一点，因此在根Reducer下只可能执行一次该函数。</p><p>Reducer函数会作为createStore的第一个参数，并且在第一次调用reducer时，state参数为undefined，因此我们也需要有初始化State的方法。举一个示例：</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>\n\nfunctino <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span><span class="token operator">:</span> <span class="token string">&#39;INCREMENT&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n    <span class="token keyword">case</span><span class="token operator">:</span> <span class="token string">&#39;DECREMENT&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>对于常规应用来讲，State中会储存各种各样的状态，从而会造成单一Reducer函数很快变得难以维护：</p><div class="language-javascript"><pre><code>  <span class="token operator">...</span>\n  <span class="token keyword">case</span><span class="token operator">:</span> <span class="token string">&#39;LOADING&#39;</span><span class="token operator">:</span>\n    <span class="token operator">...</span>\n  <span class="token keyword">case</span><span class="token operator">:</span> <span class="token string">&#39;UI_DISPLAY&#39;</span><span class="token operator">:</span>\n    <span class="token operator">...</span>\n  <span class="token operator">...</span>\n\n</code></pre></div><p>因此我们的核心目标是将函数拆分得尽可能短并满足单一职责原则，这样不仅易于维护，还方便进行扩展，接下来我们来看一个简单的TODO示例：</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>\n  visibilityFilter<span class="token operator">:</span> <span class="token string">&#39;SHOW_ALL&#39;</span><span class="token punctuation">,</span>\n  todos<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">appReducer</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;SET_VISIBILITY_FILTER&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        visibilityFilter<span class="token operator">:</span> action<span class="token punctuation">.</span>filter\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;ADD_TODO&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        todos<span class="token operator">:</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          id<span class="token operator">:</span> action<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n          text<span class="token operator">:</span> action<span class="token punctuation">.</span>text<span class="token punctuation">,</span>\n          completed<span class="token operator">:</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> state\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n</code></pre></div><p>这个函数内包含了两个独立的逻辑：过滤字段的设置与TODO对象操作逻辑，如果继续扩展下去会使得Reducer函数越来越庞大，因此我们需要将这两个逻辑拆分开进行单独维护：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">appReducer</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    todos<span class="token operator">:</span> <span class="token function">todosReducer</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    visibilityFilter<span class="token operator">:</span> <span class="token function">visibilityReducer</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>visibilityFilter<span class="token punctuation">,</span> action<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">todosReducer</span><span class="token punctuation">(</span><span class="token parameter">todosState <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;ADD_TODO&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        todos<span class="token operator">:</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          id<span class="token operator">:</span> action<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n          text<span class="token operator">:</span> action<span class="token punctuation">.</span>text<span class="token punctuation">,</span>\n          completed<span class="token operator">:</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> todosState\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">visibilityReducer</span><span class="token punctuation">(</span>visibilityState <span class="token operator">=</span> <span class="token string">&#39;SHOW_ALL&#39;</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;SET_VISIBILITY_FILTER&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token function">setVisibilityFilter</span><span class="token punctuation">(</span>visibilityState<span class="token punctuation">,</span> action<span class="token punctuation">)</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> visibilityState\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>我们将整个Reducer对象拆为两部分，并且他们独自维护自己部分的状态，这样的设计模式使得整个Reducer分散为独立的切片。Redux内置了一个combineReducers工具函数，鼓励我们这样去切分顶层Reducer，它会将所有切片组织成为一个新的Reducer函数：</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  todos<span class="token operator">:</span> todosReducer<span class="token punctuation">,</span>\n  visibilityFilter<span class="token operator">:</span> visibilityReducer\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>在 combineReducers 返回的state对象中，每个键名都代表着传入时子Reducer的键名，他们作为子Reducer中 State 的命名空间。</p><h3 id="store"><a class="header-anchor" href="#store" aria-hidden="true">#</a> Store</h3><p>在Redux应用中只有一个单一的store，通过createStore进行创建。Store对象用于将Actions与Reducers结合在一起，它具有有以下职责：</p><ul><li>储存应用的State，并允许通过getState()方法访问State。</li><li>提供dispatch(action)方法将Action派发到Reducer函数，以此来更新State。</li><li>通过subscribe(listener)监听状态更改。</li></ul><p>对于subscribe来讲，每次调用dispatch方法后都会被触发，此时状态树的某一部分可能发生了改变，我们可以在订阅方法的回调函数里使用getState或dispatch方法，但需要谨慎使用。subscribe在调用后还会返回一个函数unsubscribe函数用于取消订阅。</p><h2 id="redux-middleware"><a class="header-anchor" href="#redux-middleware" aria-hidden="true">#</a> Redux Middleware</h2><p>对于中间件的概念相信大家通过其他应用有一定的概念了解，对于Redux来讲，当我们在谈论中间件时，往往指的是从一个Action发起直到它到达Reducer之前的这一段时间里所做的事情，Redux通过Middleware机制提供给三方程序扩展的能力。</p><p>为了更好的说明中间件，我先用Redux初始化一个最简实例：</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;redux&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token constant">INCREMENT</span> <span class="token operator">=</span> <span class="token string">&#39;INCREMENT&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">DECREMENT</span> <span class="token operator">=</span> <span class="token string">&#39;DECREMENT&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token constant">INCREMENT</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token constant">DECREMENT</span><span class="token operator">:</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;decrement error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token constant">INCREMENT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印 1</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre></div><h3 id="step-1-手动添加打印日志的中间件"><a class="header-anchor" href="#step-1-手动添加打印日志的中间件" aria-hidden="true">#</a> Step 1. 手动添加打印日志的中间件</h3><p>为了深刻的理解Redux中间件，我们一步步去实现具有中间件功能的函数。为了追踪程序的状态变化，可能我们需要实现一个日志打印中间件机制，用于打印Action与执行后的State变化。我们首先通过store对象创建一个logger对象，在dispatch的前后进行日志打印：</p><div class="language-javascript"><pre><code><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token function">loggerMiddleware</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token constant">INCREMENT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">function</span> <span class="token function">loggerMiddleware</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dispatching&#39;</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">let</span> result <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;next state&#39;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 程序运行结果</span>\ndispatching <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;INCREMENT&#39;</span> <span class="token punctuation">}</span>\nnext state <span class="token number">1</span>\n\n</code></pre></div><h3 id="step-2-再添加一个错误打印的中间件"><a class="header-anchor" href="#step-2-再添加一个错误打印的中间件" aria-hidden="true">#</a> Step 2. 再添加一个错误打印的中间件</h3><p>为了监控应用程序的状态，我们还需要实现一个中间件，当在应用程序dispatch过程中发生错误时，中间件能及时捕获错误并上报（通常可上报至Sentry，但在这里就简单打印错误了）：</p><div class="language-javascript"><pre><code><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> crasher <span class="token operator">=</span> <span class="token function">crashMiddleware</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">crasher</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token constant">DECREMENT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">function</span> <span class="token function">crashMiddleware</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Caught an exception!&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n</code></pre></div><p>执行程序后，可在命令行内看到函数正确的捕获DECREMENT中的错误：</p><div class="language-javascript"><pre><code>Caught an exception<span class="token operator">!</span> ReferenceError<span class="token operator">:</span> dispatch is not defined\n</code></pre></div><h3 id="step-3-将2个中间件串联在一起"><a class="header-anchor" href="#step-3-将2个中间件串联在一起" aria-hidden="true">#</a> Step 3. 将2个中间件串联在一起</h3><p>在应用程序中一般都会有多个中间件，而将不同的中间件串联在一起是十分关键的一步操作，若你读过Koa2的源码，你大概了解一种被称之为compose的函数，它将负责处理中间件的级联工作。</p><p>在这里，为了理解其原理，我们还是一步一步进行分析。前面两个中间件的核心目标在于将Dispatch方法进行了一层包装，这样来说，我们只需要将dispatch一层层进行包裹，并传入最深层的中间件进行调用，即可满足我们程序的要求：</p><div class="language-javascript"><pre><code>dispatch <span class="token operator">=</span> store<span class="token punctuation">.</span>dispatch\n\n↓↓↓\n\n<span class="token comment">// 没有中间件的情况</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>\n\n↓↓↓\n\n<span class="token comment">// 当添加上LoggerMiddleware</span>\n<span class="token function-variable function">LoggerDispatch</span> <span class="token operator">=</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// LoggerMiddleware TODO</span>\n  <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>\n  <span class="token comment">// LoggerMiddleware TODO</span>\n<span class="token punctuation">}</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>\n\n↓↓↓\n\n<span class="token comment">// 当添加上CrashMiddleware</span>\n<span class="token function-variable function">CrashDispatch</span> <span class="token operator">=</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// CrashMiddleware TODO</span>\n  <span class="token function">LoggerDispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>\n  <span class="token comment">// CrashMiddleware TODO</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><p>如果你熟悉使用高阶函数，相信上述思路并不难以理解，那让我们通过修改源代码，尝试一下通过这样的方式，是否能使两个中间件正常工作：</p><div class="language-javascript"><pre><code><span class="token keyword">void</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> dispatch <span class="token operator">=</span> store<span class="token punctuation">.</span>dispatch\n  dispatch <span class="token operator">=</span> <span class="token function">loggerMiddleware</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span>\n  dispatch <span class="token operator">=</span> <span class="token function">crashMiddleware</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span>\n  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token constant">INCREMENT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token constant">DECREMENT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">function</span> <span class="token function">loggerMiddleware</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token parameter">dispatch</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dispatching&#39;</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;next state&#39;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">crashMiddleware</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token parameter">dispatch</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Caught an exception!&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre></div><p>此时打印结果为（符合预期）：</p><div class="language-javascript"><pre><code>dispatching <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;INCREMENT&#39;</span> <span class="token punctuation">}</span>\nnext state <span class="token number">1</span>\ndispatching <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;DECREMENT&#39;</span> <span class="token punctuation">}</span>\nCaught an exception<span class="token operator">!</span> Error<span class="token operator">:</span> decrement error\n</code></pre></div><p>当然，我们希望以更优雅的方式生成与调用dispatch，我会期望在创建时，通过传递一个中间件数组，以此来生成Store对象：</p><div class="language-javascript"><pre><code><span class="token comment">// 简单实现</span>\n<span class="token keyword">function</span> <span class="token function">createStoreWithMiddleware</span><span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> middlewares</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> dispatch <span class="token operator">=</span> store<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span>\n  middlewares<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">middleware</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    dispatch <span class="token operator">=</span> <span class="token function">middleware</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> store<span class="token punctuation">,</span> <span class="token punctuation">{</span> dispatch <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">void</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> middlewares <span class="token operator">=</span> <span class="token punctuation">[</span>loggerMiddleware<span class="token punctuation">,</span> crashMiddleware<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStoreWithMiddleware</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> middlewares<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token constant">INCREMENT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token constant">DECREMENT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="step-4-back-to-redux"><a class="header-anchor" href="#step-4-back-to-redux" aria-hidden="true">#</a> Step 4. back to Redux</h3><p>通过Step 1 ~ 3 的探索，我们大概是照瓢画葫实现了Redux的中间件机制，现在让我们来看看Redux本身提供的中间件接口。</p><p>在createStore方法中，支持一个enhancer参数，意味着三方扩展，目前支持的扩展仅为通过applyMiddleware方法创建的中间件。</p><p>applyMiddleware支持传入多个符合Redux middleware API的Middleware，每个Middleware的形式为：({ dispatch, getState }) =&gt; next =&gt; action。让我们稍作修改，通过applyMiddleware与createStore接口实现（只需要修改创建store的步骤）：</p><div class="language-javascript"><pre><code>  <span class="token comment">// ...</span>\n  <span class="token keyword">const</span> middlewares <span class="token operator">=</span> <span class="token punctuation">[</span>loggerMiddleware<span class="token punctuation">,</span> crashMiddleware<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span><span class="token operator">...</span>middlewares<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n\n</code></pre></div><p>通过applyMiddleware方法，将多个 middleware 组合到一起使用，形成 middleware 链。其中，每个 middleware 都不需要关心链中它前后的 middleware 的任何信息。 Middleware最常见的场景是实现异步actions方法，如redux-thunk与redux-saga。</p><h2 id="异步action"><a class="header-anchor" href="#异步action" aria-hidden="true">#</a> 异步Action</h2><p>对于一个标准的Redux应用程序来说，我们只能简单的通过派发Action执行同步更新，为了达到异步派发的能力，官方的标准做法是使用 redux-thunk 中间件。</p><p>为了明白什么是 redux-thunk ，先回想一下上文介绍的Middleware API：({ dispatch, getState }) =&gt; next =&gt; action，借由灵活的中间件机制，它提供给 redux-thunk 延迟派发Action的能力，允许了人们在编写Action Creator时，可以不用马上返回一个Action对象，而是返回一个函数进行异步调度，于是称之为Async Action Creator：</p><div class="language-javascript"><pre><code><span class="token comment">// synchronous, Action Creator</span>\n<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;INCREMENT&#39;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// asynchronous, Async Action Creator</span>\n<span class="token keyword">function</span> <span class="token function">incrementAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token parameter">dispatch</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;INCREMENT&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><p>而 redux-thunk 源码也不过10行左右：</p><div class="language-javascript"><pre><code>  \n<span class="token keyword">function</span> <span class="token function">createThunkMiddleware</span><span class="token punctuation">(</span><span class="token parameter">extraArgument</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> getState <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token parameter">next</span> <span class="token operator">=&gt;</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">action</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">,</span> extraArgument<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> thunk <span class="token operator">=</span> <span class="token function">createThunkMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthunk<span class="token punctuation">.</span>withExtraArgument <span class="token operator">=</span> createThunkMiddleware<span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> thunk<span class="token punctuation">;</span>\n\n\n</code></pre></div><p>通过dispatch(ActionCreator())进行调用时，函数会判断参数的类型：</p><ul><li>若为对象，走正常的触发流程，直接派发Action。</li><li>若为函数，则将其视为Async Action Creator，将dispatch方法与getState方法作为参数注入，如果全局注册了withExtraArgument的话也会作为第三个参数进行传入。</li></ul>',94);p.render=function(a,t,p,e,c,u){return s(),n("div",null,[o])};export default p;export{t as __pageData};
